/**
 * @description       : 
 * @author            : Subramani Kumarasamy
 * @group             : 
 * @last modified on  : 10-25-2023
 * @last modified by  : Subramani Kumarasamy
**/
/**
 INSTRUCTIONS TO WRITE TEST CLASS FOR SOAP CALLOUT:
    1. Create a mock class that implements the WebServiceMock interface.
        a. Create a doInvoke Method with parameters.
        b. Set the dumy response.
    2. Create a test class and annotate with @isTest.
        a. Create a test method and annotate with @isTest.
        b. Use Test.setMock method to set the mock class.
        c. Call the method that makes the SOAP callout.
    3. Verify the response with assertion.
 */
public class CalculatorServicesMock implements WebServiceMock {
    public void doInvoke(
            Object stub,
            Object request,
            Map<String, Object> response,
            String endpoint,
            String soapAction,
            String requestName,
            String responseNS,
            String responseName,
            String responseType) {
        
        if(requestName == 'doAdd'){
            // Addition
            // Create response element from the autogenerated class.
            CalculatorServices.doAddResponse response_add = new CalculatorServices.doAddResponse();
            // Populate response element.
            response_add.return_x = 20;
            // Add response element to the response parameter, as follows:
            response.put('response_x', response_add);
        }
        if(requestName == 'doSubtract'){
            // Subtract
            // Create response element from the autogenerated class.
            CalculatorServices.doSubtractResponse response_Sub = new CalculatorServices.doSubtractResponse();
            // Populate response element.
            response_Sub.return_x = 20;
            // Add response element to the response parameter, as follows:
            response.put('response_x', response_Sub);
        }
        if(requestName == 'doMultiply'){
            // Multiply
            // Create response element from the autogenerated class.
            CalculatorServices.doMultiplyResponse response_Mul = new CalculatorServices.doMultiplyResponse();
            // Populate response element.
            response_Mul.return_x = 20;
            // Add response element to the response parameter, as follows:
            response.put('response_x', response_Mul);
        }
        if(requestName == 'doDivide'){
            // Divide
            // Create response element from the autogenerated class.
            CalculatorServices.doDivideResponse response_Div = new CalculatorServices.doDivideResponse();
            // Populate response element.
            response_Div.return_x = 5;
            // Add response element to the response parameter, as follows:
            response.put('response_x', response_Div);
        }
        
    }
    
}